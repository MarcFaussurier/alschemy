!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	//
$(NAME)	Makefile	/^$(NAME):	$(COBJ)$/;"	t
$(NAME)	libft/Makefile	/^$(NAME):	$(COBJ)$/;"	t
%.o	Makefile	/^%.o:	%.c		scheme.h$/;"	t
%.o	libft/Makefile	/^%.o:	%.c		libft.h$/;"	t
AR	Makefile	/^AR			:= ar rcs$/;"	m
AR	libft/Makefile	/^AR			:= ar rcs$/;"	m
BONUSOBJ	libft/Makefile	/^BONUSOBJ	:= $(BONUSSRC:.c=.o)$/;"	m
BONUSSRC	libft/Makefile	/^BONUSSRC		:=.\/ft_lstadd_back_bonus.c\\$/;"	m
CC	Makefile	/^CC			:= gcc$/;"	m
CC	libft/Makefile	/^CC			:= gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS		:= $(CFLAGS) -I$(INC)$/;"	m
CFLAGS	Makefile	/^CFLAGS		:= -Werror -Wextra -Wall -I.\/libft$/;"	m
CFLAGS	libft/Makefile	/^CFLAGS		:= $(CFLAGS) -I$(INC)$/;"	m
CFLAGS	libft/Makefile	/^CFLAGS		:= -Werror -Wextra -Wall$/;"	m
COBJ	Makefile	/^COBJ		:= $(CSRC:.c=.o)$/;"	m
COBJ	libft/Makefile	/^COBJ		:= $(CSRC:.c=.o)$/;"	m
CSRC	Makefile	/^CSRC		:=	.\/lexer.c			\\$/;"	m
CSRC	libft/Makefile	/^CSRC			:=.\/ft_strnstr.c\\$/;"	m
DEBUG	Makefile	/^DEBUG		:= 0$/;"	m
DEBUG	libft/Makefile	/^DEBUG		:= 0$/;"	m
DEBUGFLAGS	Makefile	/^DEBUGFLAGS	:= -g -fsanitize=address -fno-omit-frame-pointer$/;"	m
DEBUGFLAGS	libft/Makefile	/^DEBUGFLAGS	:= -g -fsanitize=address -fno-omit-frame-pointer$/;"	m
FALSE	libft/libft.h	/^#  define FALSE /;"	d
INC	Makefile	/^INC			:= .\/$/;"	m
INC	libft/Makefile	/^INC			:= .\/$/;"	m
LIBFT_H	libft/libft.h	/^# define LIBFT_H$/;"	d
NAME	Makefile	/^NAME		:= scheme$/;"	m
NAME	libft/Makefile	/^NAME		:= libft.a$/;"	m
RM	Makefile	/^RM			:= rm -rf$/;"	m
RM	libft/Makefile	/^RM			:= rm -rf$/;"	m
SCHEME_H	scheme.h	/^# define SCHEME_H$/;"	d
TRUE	libft/libft.h	/^#  define TRUE /;"	d
_char	scheme.h	/^						_char,$/;"	e	enum:e_cell_type
_double	scheme.h	/^						_double,$/;"	e	enum:e_cell_type
_float	scheme.h	/^						_float,$/;"	e	enum:e_cell_type
_function	scheme.h	/^						_function,$/;"	e	enum:e_cell_type
_identifier	scheme.h	/^                        _identifier$/;"	e	enum:e_cell_type
_int	scheme.h	/^						_int,$/;"	e	enum:e_cell_type
_long_double	scheme.h	/^						_long_double,$/;"	e	enum:e_cell_type
_long_long	scheme.h	/^						_long_long,$/;"	e	enum:e_cell_type
_ptr	scheme.h	/^						_ptr,$/;"	e	enum:e_cell_type
_short	scheme.h	/^						_short,$/;"	e	enum:e_cell_type
_string	scheme.h	/^                        _string,$/;"	e	enum:e_cell_type
_unsigned_char	scheme.h	/^						_unsigned_char,$/;"	e	enum:e_cell_type
_unsigned_int	scheme.h	/^						_unsigned_int,$/;"	e	enum:e_cell_type
_unsigned_long	scheme.h	/^						_unsigned_long,$/;"	e	enum:e_cell_type
_unsigned_long_long	scheme.h	/^						_unsigned_long_long,$/;"	e	enum:e_cell_type
_unsigned_short	scheme.h	/^						_unsigned_short,$/;"	e	enum:e_cell_type
all	Makefile	/^all:		$(NAME)$/;"	t
all	libft/Makefile	/^all:		$(NAME)$/;"	t
bonus	Makefile	/^bonus:		$(COBJ) $(BONUSOBJ)$/;"	t
bonus	libft/Makefile	/^bonus:		$(COBJ) $(BONUSOBJ)$/;"	t
call	scheme.h	/^						call,$/;"	e	enum:e_token
childs	scheme.h	/^	t_list				*childs;$/;"	m	struct:s_cell	typeref:typename:t_list *
clean	Makefile	/^clean:$/;"	t
clean	libft/Makefile	/^clean:$/;"	t
comment	scheme.h	/^	int					comment;$/;"	m	struct:s_lexer_state	typeref:typename:int
comments	scheme.h	/^	int					comments;$/;"	m	struct:s_lexer_state	typeref:typename:int
content	libft/libft.h	/^	void				*content;$/;"	m	struct:s_list	typeref:typename:void *
content	scheme.h	/^	char				*content;$/;"	m	struct:s_token	typeref:typename:char *
current_token	scheme.h	/^	t_token				*current_token;$/;"	m	struct:s_lexer_state	typeref:typename:t_token *
dump_cell	parser.c	/^void            dump_cell(t_cell *cell)$/;"	f	typeref:typename:void
dump_cell_childs	parser.c	/^void            dump_cell_childs(t_cell *cell)$/;"	f	typeref:typename:void
dump_cell_data	parser.c	/^void            dump_cell_data(t_cell *cell)$/;"	f	typeref:typename:void
dump_cell_type	parser.c	/^void            dump_cell_type(t_cell *cell)$/;"	f	typeref:typename:void
dump_tokens	lexer.c	/^void        dump_tokens(t_list *tokens)$/;"	f	typeref:typename:void
e_bool	libft/libft.h	/^typedef enum			e_bool$/;"	g
e_cell_type	scheme.h	/^typedef enum			e_cell_type$/;"	g
e_token	scheme.h	/^typedef enum			e_token$/;"	g
end	scheme.h	/^						end,$/;"	e	enum:e_token
escaped	scheme.h	/^	int					escaped;$/;"	m	struct:s_lexer_state	typeref:typename:int
eval	evaluator.c	/^t_cell      *eval(t_cell *eval)$/;"	f	typeref:typename:t_cell *
fclean	Makefile	/^fclean:		clean$/;"	t
fclean	libft/Makefile	/^fclean:		clean$/;"	t
flush	lexer.c	/^void			flush(t_lexer_state *state)$/;"	f	typeref:typename:void
flush	libft/ft_split.c	/^static t_bool	flush(t_split_state *state)$/;"	f	typeref:typename:t_bool	file:
flush_call	lexer.c	/^void			flush_call(t_lexer_state *state)$/;"	f	typeref:typename:void
flush_char	lexer.c	/^void			flush_char(t_lexer_state *state)$/;"	f	typeref:typename:void
flush_end	lexer.c	/^void			flush_end(t_lexer_state *state)$/;"	f	typeref:typename:void
ft_atoi	libft/ft_atoi.c	/^int				ft_atoi(const char *str)$/;"	f	typeref:typename:int
ft_bytes_digits	libft/ft_bytes_digits.c	/^unsigned int		ft_bytes_digits(size_t bytes)$/;"	f	typeref:typename:unsigned int
ft_bzero	libft/ft_bzero.c	/^void		ft_bzero(void *s, size_t n)$/;"	f	typeref:typename:void
ft_calloc	libft/ft_calloc.c	/^void			*ft_calloc(size_t nmemb, size_t size)$/;"	f	typeref:typename:void *
ft_count_occ	libft/ft_count_occ.c	/^unsigned int		ft_count_occ(const char *s, char c)$/;"	f	typeref:typename:unsigned int
ft_free_until	libft/ft_free_until.c	/^void			ft_free_until(void **array, void *end)$/;"	f	typeref:typename:void
ft_is_char_in	libft/ft_is_char_in.c	/^t_bool				ft_is_char_in(char c, char const *str)$/;"	f	typeref:typename:t_bool
ft_isalnum	libft/ft_isalnum.c	/^int			ft_isalnum(int c)$/;"	f	typeref:typename:int
ft_isalpha	libft/ft_isalpha.c	/^int			ft_isalpha(int c)$/;"	f	typeref:typename:int
ft_isascii	libft/ft_isascii.c	/^int				ft_isascii(int c)$/;"	f	typeref:typename:int
ft_isdigit	libft/ft_isdigit.c	/^int			ft_isdigit(int c)$/;"	f	typeref:typename:int
ft_islower	libft/ft_islower.c	/^int			ft_islower(int c)$/;"	f	typeref:typename:int
ft_isprint	libft/ft_isprint.c	/^int				ft_isprint(int c)$/;"	f	typeref:typename:int
ft_isspace	libft/ft_isspace.c	/^int		ft_isspace(int c)$/;"	f	typeref:typename:int
ft_isupper	libft/ft_isupper.c	/^int				ft_isupper(int c)$/;"	f	typeref:typename:int
ft_itoa	libft/ft_itoa.c	/^char				*ft_itoa(int n)$/;"	f	typeref:typename:char *
ft_lstadd_back	libft/ft_lstadd_back_bonus.c	/^void		ft_lstadd_back(t_list **alst, t_list *new)$/;"	f	typeref:typename:void
ft_lstadd_front	libft/ft_lstadd_front_bonus.c	/^void	ft_lstadd_front(t_list **alst, t_list *new)$/;"	f	typeref:typename:void
ft_lstclear	libft/ft_lstclear_bonus.c	/^void		ft_lstclear(t_list **lst, void (*del)(void*))$/;"	f	typeref:typename:void
ft_lstdelone	libft/ft_lstdelone_bonus.c	/^void		ft_lstdelone(t_list *lst, void (*del)(void*))$/;"	f	typeref:typename:void
ft_lstiter	libft/ft_lstiter_bonus.c	/^void	ft_lstiter(t_list *lst, void (*f)(void *))$/;"	f	typeref:typename:void
ft_lstlast	libft/ft_lstlast_bonus.c	/^t_list		*ft_lstlast(t_list *lst)$/;"	f	typeref:typename:t_list *
ft_lstmap	libft/ft_lstmap_bonus.c	/^t_list		*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *))$/;"	f	typeref:typename:t_list *
ft_lstnew	libft/ft_lstnew_bonus.c	/^t_list		*ft_lstnew(void *content)$/;"	f	typeref:typename:t_list *
ft_lstsize	libft/ft_lstsize_bonus.c	/^int			ft_lstsize(t_list *lst)$/;"	f	typeref:typename:int
ft_memccpy	libft/ft_memccpy.c	/^void			*ft_memccpy(void *dest, const void *src, int c, size_t n)$/;"	f	typeref:typename:void *
ft_memchr	libft/ft_memchr.c	/^void				*ft_memchr(const void *s, int c, size_t n)$/;"	f	typeref:typename:void *
ft_memcmp	libft/ft_memcmp.c	/^int					ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f	typeref:typename:int
ft_memcpy	libft/ft_memcpy.c	/^void						*ft_memcpy(void *dest, const void *src, size_t n)$/;"	f	typeref:typename:void *
ft_memmove	libft/ft_memmove.c	/^void				*ft_memmove(void *dst, const void *src, size_t n)$/;"	f	typeref:typename:void *
ft_memset	libft/ft_memset.c	/^void				*ft_memset(void *s, int c, size_t len)$/;"	f	typeref:typename:void *
ft_numlen	libft/ft_numlen.c	/^unsigned short			ft_numlen(int n)$/;"	f	typeref:typename:unsigned short
ft_putchar	libft/ft_putchar.c	/^void		ft_putchar(char c)$/;"	f	typeref:typename:void
ft_putchar_fd	libft/ft_putchar_fd.c	/^void		ft_putchar_fd(char c, int fd)$/;"	f	typeref:typename:void
ft_putendl	libft/ft_putendl.c	/^void		ft_putendl(char *s)$/;"	f	typeref:typename:void
ft_putendl_fd	libft/ft_putendl_fd.c	/^void		ft_putendl_fd(char *s, int fd)$/;"	f	typeref:typename:void
ft_putnbr	libft/ft_putnbr.c	/^void	ft_putnbr(int n)$/;"	f	typeref:typename:void
ft_putnbr_fd	libft/ft_putnbr_fd.c	/^void		ft_putnbr_fd(int n, int fd)$/;"	f	typeref:typename:void
ft_putstr	libft/ft_putstr.c	/^void		ft_putstr(char *s)$/;"	f	typeref:typename:void
ft_putstr_fd	libft/ft_putstr_fd.c	/^void		ft_putstr_fd(char *s, int fd)$/;"	f	typeref:typename:void
ft_read	libft/ft_read.c	/^char		*ft_read(char delimiter)$/;"	f	typeref:typename:char *
ft_read_fd	libft/ft_read_fd.c	/^char				*ft_read_fd(char delimiter, int fd)$/;"	f	typeref:typename:char *
ft_realloc	libft/ft_realloc.c	/^void		*ft_realloc(void *ptr, size_t size)$/;"	f	typeref:typename:void *
ft_split	libft/ft_split.c	/^char			**ft_split(char const *s, char d)$/;"	f	typeref:typename:char **
ft_strchr	libft/ft_strchr.c	/^char			*ft_strchr(const char *s, int c)$/;"	f	typeref:typename:char *
ft_strcpy	libft/ft_strcpy.c	/^char				*ft_strcpy(char *dst, const char *src)$/;"	f	typeref:typename:char *
ft_strdup	libft/ft_strdup.c	/^char		*ft_strdup(const char *src)$/;"	f	typeref:typename:char *
ft_strjoin	libft/ft_strjoin.c	/^char				*ft_strjoin(char const *s1, char const *s2)$/;"	f	typeref:typename:char *
ft_strlcat	libft/ft_strlcat.c	/^size_t			ft_strlcat(char *dst, const	char *src, size_t dstsize)$/;"	f	typeref:typename:size_t
ft_strlcpy	libft/ft_strlcpy.c	/^size_t				ft_strlcpy(char *dest, const char *src, size_t len)$/;"	f	typeref:typename:size_t
ft_strlen	libft/ft_strlen.c	/^size_t		ft_strlen(const char *s)$/;"	f	typeref:typename:size_t
ft_strmapi	libft/ft_strmapi.c	/^char				*ft_strmapi(const char *s, char (*f)(unsigned int, char))$/;"	f	typeref:typename:char *
ft_strncmp	libft/ft_strncmp.c	/^int				ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f	typeref:typename:int
ft_strnlen	libft/ft_strnlen.c	/^size_t		ft_strnlen(const char *s, size_t maxlen)$/;"	f	typeref:typename:size_t
ft_strnstr	libft/ft_strnstr.c	/^char		*ft_strnstr(const char *haystack, const char *needle, size_t len)$/;"	f	typeref:typename:char *
ft_strrchr	libft/ft_strrchr.c	/^char			*ft_strrchr(const char *s, int c)$/;"	f	typeref:typename:char *
ft_strtrim	libft/ft_strtrim.c	/^char		*ft_strtrim(char const *s1, char const *set)$/;"	f	typeref:typename:char *
ft_strtrim_begin	libft/ft_strtrim_begin.c	/^char				*ft_strtrim_begin(char const *s1, char const *set)$/;"	f	typeref:typename:char *
ft_strtrim_end	libft/ft_strtrim_end.c	/^char		*ft_strtrim_end(char const *s1, char const *set)$/;"	f	typeref:typename:char *
ft_substr	libft/ft_substr.c	/^char				*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f	typeref:typename:char *
ft_tolower	libft/ft_tolower.c	/^int			ft_tolower(int c)$/;"	f	typeref:typename:int
ft_toupper	libft/ft_toupper.c	/^int			ft_toupper(int c)$/;"	f	typeref:typename:int
g_false	libft/libft.h	/^{g_false, g_true}		t_bool;$/;"	e	enum:e_bool
g_true	libft/libft.h	/^{g_false, g_true}		t_bool;$/;"	e	enum:e_bool
get_after_call	parser.c	/^t_list          *get_after_call(t_list *tokens)$/;"	f	typeref:typename:t_list *
help	main.c	/^void			help()$/;"	f	typeref:typename:void
i	libft/libft.h	/^	unsigned int		i;$/;"	m	struct:s_split_state	typeref:typename:unsigned int
i	scheme.h	/^	unsigned int		i;$/;"	m	struct:s_lexer_state	typeref:typename:unsigned int
identifier	scheme.h	/^						identifier,$/;"	e	enum:e_token
identifier	scheme.h	/^	char				*identifier;$/;"	m	struct:s_cell	typeref:typename:char *
init	libft/ft_split.c	/^static t_bool	init(const char *s, char d, t_split_state *state)$/;"	f	typeref:typename:t_bool	file:
init_lexer_state	lexer.c	/^void			init_lexer_state(t_lexer_state *state, char *source)$/;"	f	typeref:typename:void
init_token	lexer.c	/^void			init_token(t_token *in)$/;"	f	typeref:typename:void
interpret	main.c	/^void            interpret(char *input_buffer)$/;"	f	typeref:typename:void
lex	lexer.c	/^t_list          *lex(char *source)$/;"	f	typeref:typename:t_list *
locked	scheme.h	/^	t_bool				locked;$/;"	m	struct:s_cell	typeref:typename:t_bool
main	main.c	/^int				main(int argc, char **argv)$/;"	f	typeref:typename:int
nb_words	libft/libft.h	/^	unsigned int		nb_words;$/;"	m	struct:s_split_state	typeref:typename:unsigned int
next	libft/libft.h	/^	struct s_list		*next;$/;"	m	struct:s_list	typeref:struct:s_list *
nop	scheme.h	/^						nop$/;"	e	enum:e_token
norme	Makefile	/^norme:$/;"	t
norme	libft/Makefile	/^norme:$/;"	t
numeric	scheme.h	/^						numeric,$/;"	e	enum:e_token
out	libft/libft.h	/^	char				**out;$/;"	m	struct:s_split_state	typeref:typename:char **
output	scheme.h	/^	t_list				**output;$/;"	m	struct:s_lexer_state	typeref:typename:t_list **
output_size	scheme.h	/^    int					output_size;$/;"	m	struct:s_lexer_state	typeref:typename:int
parent	scheme.h	/^    struct s_scope*     parent;$/;"	m	struct:s_scope	typeref:struct:s_scope *
parse	parser.c	/^t_cell			*parse(t_list *tokens)$/;"	f	typeref:typename:t_cell *
protect_delimiter	libft/ft_split.c	/^static char     **protect_delimiter(t_split_state *state, char const *s)$/;"	f	typeref:typename:char **	file:
protect_string	libft/ft_split.c	/^static char     **protect_string(t_split_state *state)$/;"	f	typeref:typename:char **	file:
quote	scheme.h	/^	int					quote;$/;"	m	struct:s_lexer_state	typeref:typename:int
quotes	scheme.h	/^	int					quotes;$/;"	m	struct:s_lexer_state	typeref:typename:int
re	Makefile	/^re:		fclean all$/;"	t
re	libft/Makefile	/^re:		fclean all$/;"	t
read_eval_files	main.c	/^void			read_eval_files(char **first, char **last)$/;"	f	typeref:typename:void
read_eval_loop	main.c	/^void			read_eval_loop()$/;"	f	typeref:typename:void
root	scheme.h	/^	struct s_cell		*root;$/;"	m	struct:s_cell	typeref:struct:s_cell *
s_cell	scheme.h	/^typedef struct			s_cell$/;"	s
s_len	libft/libft.h	/^	unsigned int		s_len;$/;"	m	struct:s_split_state	typeref:typename:unsigned int
s_lexer_state	scheme.h	/^typedef struct			s_lexer_state$/;"	s
s_list	libft/libft.h	/^typedef struct			s_list$/;"	s
s_scope	scheme.h	/^typedef struct          s_scope$/;"	s
s_split_state	libft/libft.h	/^typedef struct			s_split_state$/;"	s
s_token	scheme.h	/^typedef struct			s_token$/;"	s
source	scheme.h	/^	char				*source;$/;"	m	struct:s_lexer_state	typeref:typename:char *
string	scheme.h	/^						string,$/;"	e	enum:e_token
t_bool	libft/libft.h	/^{g_false, g_true}		t_bool;$/;"	t	typeref:enum:e_bool
t_cell	scheme.h	/^}						t_cell;$/;"	t	typeref:struct:s_cell
t_cell_type	scheme.h	/^}						t_cell_type;$/;"	t	typeref:enum:e_cell_type
t_lexer_state	scheme.h	/^}						t_lexer_state;$/;"	t	typeref:struct:s_lexer_state
t_list	libft/libft.h	/^}						t_list;$/;"	t	typeref:struct:s_list
t_scope	scheme.h	/^}                       t_scope;$/;"	t	typeref:struct:s_scope
t_split_state	libft/libft.h	/^}						t_split_state;$/;"	t	typeref:struct:s_split_state
t_token	scheme.h	/^}						t_token;$/;"	t	typeref:struct:s_token
t_token_type	scheme.h	/^}                       t_token_type;$/;"	t	typeref:enum:e_token
tmp	libft/libft.h	/^	char				*tmp;$/;"	m	struct:s_split_state	typeref:typename:char *
type	scheme.h	/^	t_cell_type	        type;$/;"	m	struct:s_cell	typeref:typename:t_cell_type
type	scheme.h	/^	t_token_type		type;$/;"	m	struct:s_token	typeref:typename:t_token_type
value	scheme.h	/^	void*				value;$/;"	m	struct:s_cell	typeref:typename:void *
variables	scheme.h	/^    t_list              *variables;$/;"	m	struct:s_scope	typeref:typename:t_list *
version	main.c	/^const char		*version = "0.01";$/;"	v	typeref:typename:const char *
welcome	main.c	/^void			welcome()$/;"	f	typeref:typename:void
y	libft/libft.h	/^	unsigned int		y;$/;"	m	struct:s_split_state	typeref:typename:unsigned int
